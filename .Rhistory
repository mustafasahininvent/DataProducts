star[is.na(star)]<-0
#j[,c("avgSum4Price"):= star[,list(sum(tail(sum4Tl,nAvg))/sum(tail(sum4Amt,nAvg)))] ]
saleDT<-star
}
s
saleDT
j
qplot(refdate,V1,data=WeekEffect[productGroup==103025])
qplot(refdate,multiplicative,data=WeekEffect[productGroup==103025])
nrow(skuProm)>0)
nrow(skuProm)>0
14/12
skuProm <- promotion[J(j$sku),nomatch=0]
nrow(skuProm)>0
setkey(skuProm,promOn)
skuPastPromRolled <- skuProm[txdates[txdate>=max(j$firstStockOn,today-j$nAvg,na.rm=T)],list(promEffect),roll=T]
skuPastPromRolled[is.na(skuPastPromRolled)]<-1
skuPastPromRolled
skuProm
txdates
skuPastPromRolled <- skuProm[txdates[txdate>=max(j$firstStockOn,today-j$nAvg,na.rm=T)],list(txdate,promEffect),roll=T]
skuPastPromRolled[is.na(skuPastPromRolled)]<-1
skuPastPromRolled
promPastRatio<-ifelse(nrow(skuPastPromRolled)>0,skuPastPromRolled[,mean(promEffect,)],1)
promPastRatio
if(i%%1000 == 0){
print(Sys.time())
flush.console()
print(i)
flush.console()
}
j<-stk[i]
nAvg<-j$nAvg
koli=j$amountBoxOut
LEAD = j$supplyDays
gap<-j$gap
#_pre_stkOn
if(j$isNewStocked | is.na(j$firstStockOn)){
j[,finalMpy:=ifelse(is.na(firstStockOn),0,finalMpy)]
stars<-data.table(sum2Amt=0,sum4Amt=0)
saleDT<-stars
} else {
s<-txw[J(j$sku,j$store), list( createOn, sum2Amt, sum4Amt,
sum4Tl )]
setkeyv(s,cols="createOn")
#_pre_stkOn
star<-s[txdates[txdate>=j$firstStockOn], list( txdate,sum2Amt, sum4Amt,
sum4Tl)]
#_pre_stkOn
if(nrow(star)==0){ #firstStockOn null ise... isNewStock'ta değerlendirilecek, yine de patlamaması için önlem..
star$sum2Amt<-0;star$sum4Amt<-0
}
star[is.na(star)]<-0
#j[,c("avgSum4Price"):= star[,list(sum(tail(sum4Tl,nAvg))/sum(tail(sum4Amt,nAvg)))] ]
saleDT<-star
}
skuProm <- promotion[J(j$sku),nomatch=0]
star
s
setkey(skuProm,promOn)
skuPastPromRolled <- skuProm[txdates[txdate>=j$firstStockOn],list(txdate,promEffect),roll=T]
skuPastPromRolled[is.na(skuPastPromRolled)]<-1
promPastRatio<-ifelse(nrow(skuPastPromRolled)>0,skuPastPromRolled[,mean(promEffect,)],1)
skuPastPromRolled
promPastRatio<-ifelse(nrow(skuPastPromRolled)>0,skuPastPromRolled[,mean(promEffect,)],1)
promPastRatio
futurePromDates<-seq(today+j$supplyDays,
to=(today+1)             #bir gün daha range'e ilave edip yarın baksak prom a mı girer mukayese için
+2*j$supplyDays,by=1) # beklenen teslim suresi ile bir sonraki sipariş zamanına kardar( varsay +1Lead)
futurePromDates<-data.table(futurePromDate=futurePromDates,key="futurePromDate")
futurePromDates
skuProm
skuFuturePromRolled<-skuProm[futurePromDates,list(futurePromDate,promEffect),roll=T]
skuFuturePromRolled
nr<-nrow(skuFuturePromRolled)
promFutureRatio<- pmax(skuFuturePromRolled[-nr][,mean(promEffect)],skuFuturePromRolled[nr,promEffect])
promFutureRatio
futurePromDates<-seq(today,
to=(today+1)             #bir gün daha range'e ilave edip yarın baksak prom a mı girer mukayese için
+2*j$supplyDays,by=1) # beklenen teslim suresi ile bir sonraki sipariş zamanına kardar( varsay +1Lead)
futurePromDates<-data.table(futurePromDate=futurePromDates,key="futurePromDate")
skuFuturePromRolled<-skuProm[futurePromDates,list(futurePromDate,promEffect),roll=T]
#
skuFuturePromRolled
txdates
stars
star
s
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
myPlot()
myPlot(3)
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
install.packages("airquality")
dTable(airquality, sPaginationType = "full_numbers")
load("rCharts")
library("rCharts")
library('rCharts')
library('rcharts')
require(rCharts)
require('rCharts')
install.packages("rCharts")
install.packages('rCharts')
install.packages('rcharts')
require(manipulate)
#### DryRun Version2.0 ####
# only one method
###Packages####
closeAllConnections()
rm(list=ls())
value=1
library("RODBC")
library(reshape)
require(data.table)
require(bit64)
### in order to see Turkish characters right
Sys.setlocale("LC_ALL", "English_United States.1254")
####
setwd("C:/KCT/")
source('C:/KCT/InventRFunctions.R')
##### promotion initialization (reShape in production)
repeat.before <- function(x) {   # repeats the last non NA value. Keeps leading NA
ind = which(!is.na(x))
if(is.na(x[1]))
ind = c(1,ind)
rep(x[ind], times = diff(c(ind, length(x) + 1) ))
}
getPromotion <- function(){
q<-"select * from _HELP_PROMOTION"
uuu<-sqlQuery(dbhandle,q)
uuu<-data.table(uuu,key="sku")
uuu[,c("promOn"):=lapply(.SD,fast.date),.SDcols=c("promOn")]
cst<-(cast(uuu,promOn + sku ~ type, value="b"))
cst<-data.table(cst,key="sku")
promColNames<-setdiff(names(cst),c("promOn","sku"))
cst[,c(promColNames):=lapply(.SD,repeat.before),.SDcols=c(promColNames),by="sku"]
cst[is.na(cst)]<-0
cst[,prom:=apply(cst[,promColNames,with=FALSE],1,max)]
cst[,promEffect:=ifelse(prom==1,1.4,1)]
return(cst)
}
###Beginig-------------------------------------------------
gunen<-format(Sys.Date(), "%A")
gun<-Gunler[en %in% gunen]$tr
sufx<-format(Sys.time(), "%Y%m%d")
##_pre_DEPO##
sufx<-paste0("DEPO_",sufx)
load("G:/Koctas/depo.rdata")
stk
anmes(stk)
names(stk)
WeekEffect
library(reshape)
require(data.table)
require(bit64)
qplot(refdate,V1,data=WeekEffect[productGroup<600000,mean(multiplicative,na.rm=T),list(refdate,productGroup%/%1000)],facets=~productGroup)
require(ggplot2)
install.packages("reshape")
install.packages("data.table")
install.packages("bit64")
install.packages("ggplot2")
#### DryRun Version2.0 ####
# only one method
###Packages####
closeAllConnections()
rm(list=ls())
value=1
library("RODBC")
library(reshape)
require(data.table)
require(bit64)
### in order to see Turkish characters right
Sys.setlocale("LC_ALL", "English_United States.1254")
####
install.packages("RODBC")
#### DryRun Version2.0 ####
# only one method
###Packages####
closeAllConnections()
rm(list=ls())
value=1
library("RODBC")
library(reshape)
require(data.table)
require(bit64)
### in order to see Turkish characters right
Sys.setlocale("LC_ALL", "English_United States.1254")
####
##### promotion initialization (reShape in production)
repeat.before <- function(x) {   # repeats the last non NA value. Keeps leading NA
ind = which(!is.na(x))
if(is.na(x[1]))
ind = c(1,ind)
rep(x[ind], times = diff(c(ind, length(x) + 1) ))
}
getPromotion <- function(){
q<-"select * from _HELP_PROMOTION"
uuu<-sqlQuery(dbhandle,q)
uuu<-data.table(uuu,key="sku")
uuu[,c("promOn"):=lapply(.SD,fast.date),.SDcols=c("promOn")]
cst<-(cast(uuu,promOn + sku ~ type, value="b"))
cst<-data.table(cst,key="sku")
promColNames<-setdiff(names(cst),c("promOn","sku"))
cst[,c(promColNames):=lapply(.SD,repeat.before),.SDcols=c(promColNames),by="sku"]
cst[is.na(cst)]<-0
cst[,prom:=apply(cst[,promColNames,with=FALSE],1,max)]
cst[,promEffect:=ifelse(prom==1,1.4,1)]
return(cst)
}
load("G:/Koctas/depo.rdata")
stk[,gap:=1]
stk[price>=100,gap:=2]
stk[price>=500,gap:=3]
print(Sys.time())
flush.console()
print(nrow(stk))
flush.console()
nAvg<-52
DATA<-data.table(NULL)
WeekEffect
qplot(refdate,V1,data=WeekEffect[productGroup<600000,mean(multiplicative,na.rm=T),list(refdate,productGroup%/%1000)],facets=~productGroup)
require(ggplot2)
qplot(refdate,V1,data=WeekEffect[productGroup<600000,mean(multiplicative,na.rm=T),list(refdate,productGroup%/%1000)],facets=~productGroup)
require(manipulate)
?manipulate
WeekEffect$productGroup
unique(WeekEffect$productGroup)
pggraph<-function(x){
qplot(refdate,V1,data=WeekEffect[productGroup=x,mean(multiplicative,na.rm=T),list(refdate,productGroup%/%1000)],facets=~productGroup)
}
pggraph(103011)
pggraph<-function(x){
qplot(refdate,V1,data=WeekEffect[productGroup==x,mean(multiplicative,na.rm=T),list(refdate,productGroup%/%1000)],facets=~productGroup)
}
pggraph(103011)
manipulate(pgraph(pg),pg=picker(sort(unique(WeekEffect$productGroup))))
manipulate(pggraph(pg),pg=picker(sort(unique(WeekEffect$productGroup))))
pg
sort(unique(WeekEffect$productGroup)))
sort(unique(WeekEffect$productGroup))
as.character(sort(unique(WeekEffect$productGroup)))
manipulate(pggraph(pg),pg=picker(as.character(sort(unique(WeekEffect$productGroup)))))
pggraph<-function(x){
qplot(refdate,V1,data=WeekEffect[productGroup==as.numeric(x),mean(multiplicative,na.rm=T),list(refdate,productGroup%/%1000)],facets=~productGroup)
}
pggraph(103011)
pggraph(103010)
pggraph("103007")
pggraph<-function(x){
qplot(refdate,V1,data=WeekEffect[productGroup==as.numeric(x),mean(multiplicative,na.rm=T),list(refdate,productGroup%/%1000)],facets=~productGroup)
}
manipulate(pggraph(pg),pg=picker(as.character(sort(unique(WeekEffect$productGroup)))))
manipulate(pggraph(pg),pg=picker(as.character(sort(unique(WeekEffect$productGroup)))),initial=103011)
manipulate(pggraph(pg),pg=picker(as.character(sort(unique(WeekEffect$productGroup))),initial=103011))
?picker
manipulate(pggraph(pg),pg=picker((unique(WeekEffect$productGroup)),initial=103011))
manipulate(pggraph(pg),pg=picker(as.list(unique(WeekEffect$productGroup)),initial=103011))
manipulate(pggraph(pg),pg=picker(as.list(unique(WeekEffect$productGroup)),initial=103011,label="ProductG"))
manipulate(pggraph(pg),pg=picker(as.list(unique(WeekEffect$productGroup)),label="ProductG"))
manipulate(pggraph(pg),pg=picker((unique(WeekEffect$productGroup)),label="ProductG"))
manipulate(pggraph(pg),pg=picker(as.list(unique(WeekEffect$productGroup)),label="ProductG"))
#### DryRun Version2.0 ####
# only one method
###Packages####
closeAllConnections()
rm(list=ls())
library("RODBC")
library(reshape)
require(data.table)
require(bit64)
### in order to see Turkish characters right
Sys.setlocale("LC_ALL", "English_United States.1254")
####
setwd("C:/KCT/")
source('C:/KCT/InventRFunctions.R')
##### promotion initialization (reShape in production)
repeat.before <- function(x) {   # repeats the last non NA value. Keeps leading NA
ind = which(!is.na(x))
if(is.na(x[1]))
ind = c(1,ind)
rep(x[ind], times = diff(c(ind, length(x) + 1) ))
}
getPromotion <- function(){
q<-"select * from _HELP_PROMOTION"
uuu<-sqlQuery(dbhandle,q)
uuu<-data.table(uuu,key="sku")
uuu[,c("promOn"):=lapply(.SD,fast.date),.SDcols=c("promOn")]
cst<-(cast(uuu,promOn + sku ~ type, value="b"))
cst<-data.table(cst,key="sku")
promColNames<-setdiff(names(cst),c("promOn","sku"))
cst[,c(promColNames):=lapply(.SD,repeat.before),.SDcols=c(promColNames),by="sku"]
cst[is.na(cst)]<-0
cst[,prom:=apply(cst[,promColNames,with=FALSE],1,max)]
cst[,promEffect:=ifelse(prom==1,1.4,1)]
return(cst)
}
malgrubu<-1
writeDB<-FALSE
nAvg<-52
load('G:/Koctas/depo.rdata')
txdates
DATES<-tail(txdates,245)
today<-DATES[1]
today
begin = today - nAvg
txdates<-seq(begin,to=today-1,by=1)
txdates<-data.table(txdate=txdates,key="txdate")
begin
nAvg
nAvg<-120
begin = today - nAvg
txdates<-seq(begin,to=today-1,by=1)
begin
today
seq(begin,to=today-1,by=1)
for ( today in DATES){
}
begin = today - nAvg
txdates<-seq(begin,to=today-1,by=1)
today
DATEs
DATES
-------------------------
for ( today in DATES$txdate){
for ( today in DATES$txdate){
}
today
begin = today - nAvg
txdates<-seq(begin,to=today-1,by=1)
DATES<-tail(txdates$txdate,245)
today<-DATES[1]
today
begin = today - nAvg
txdates<-seq(begin,to=today-1,by=1)
DATES<-tail(txdates$txdate,245)
txdates
DATES<-tail(txdates,245)
DATES
load('G:/Koctas/depo.rdata')
txdates
otxdates<-txdates
DATES<-tail(txdates$txdate,245)
DATES
today<-DATES[1]
today
begin = today - nAvg
txdates<-seq(begin,to=today-1,by=1)
txdates<-data.table(txdate=txdates,key="txdate")
gunen<-format(today, "%A")
gun<-Gunler[en %in% gunen]$tr
sufx<-format(Sys.time(), "%Y%m%d")
##_pre_DEPO##
sufx<-paste0("DEPO_",sufx)
stk
ostk<-stk
lsos()
stk
key(stk)
stk<-mergeProm(stk);
WeekEffect
#### Connection  From Invent to Koctas ####
## VPN connection must be done before hand
###Packages####
closeAllConnections()
rm(list=ls())
library("RODBC")
require(data.table)
require(bit64)
### in order to see Turkish characters right
Sys.setlocale("LC_ALL", "English_United States.1254")
###Beginig-------------------------------------------------
dbhandle <- odbcDriverConnect('driver={SQL Server};server=10.160.160.120;database=Koctas;uid=ktadm;pwd=Kt1881KS')
dbhandlenew <- odbcDriverConnect('driver={SQL Server};server=10.160.160.120;database=KoctasNew;uid=ktadm;pwd=Kt1881KS')
q<-"SELECT *
FROM koctas.dbo.b_move_dept"
move_dept<- sqlQuery(dbhandl,q)
move_dept<- sqlQuery(dbhandle,q)
moved<-data.table(move_dept)
moved
moved[nRow>6,list(n=length(minL),min=min(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)]
moved[nRow>6,list(n=length(minL),min=min(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>1]
moved[nRow>6,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2  ]
moved[nRow>10,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2  ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (avg/sd)>1 ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (sd/avg)>1 ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (sd/avg)>0.5 ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (sd/avg)>1 ]
moved[nRow>6,list(n=length(minL),min=min(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)]
moved[nRow>6,list(n=length(minL),min=min(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>1]
moved[nRow>6,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2  ]
moved[nRow>10,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2  ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2  ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (sd/avg)>1 ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (sd/avg)>0.5 ]
q<-"SELECT *
FROM koctas.dbo.b_move"
move<- sqlQuery(dbhandle,q)
move<-data.table(move)
move
move[,mean(avgL),sourceType]
move[store>6000,mean(avgL),sourceType]
move[,median(avgL),sourceType]
move[store>6000,median(avgL),sourceType]
sd(c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1))
sd(c(1,0,1))
sd(c(1,0,1))/sqrt(7)
v<-rep(0,21)
v
v[1]<-1
v[20]<-1
sd(v)
tapply( v, (seq_along(v)-1) %/% 7, sum)
?tapply
seq_along(v)
(seq_along(v)-1) %/% 7
vv<-tapply( v, (seq_along(v)-1) %/% 7, sum)
vv
sd(vv)
class(vv)
str(vv)
sd(vv)
v<-rep(0,2)
vv<-tapply( v, (seq_along(v)-1) %/% 7, sum)
sd(vv)
vv
sd(0,1)
sd(c(0,1))
sd(c(0,0,0,0,0,0,1))
sd(vv)/sqrt(7)
v<-rep(0,21)
v[1]<-1
v[20]<-1
vv<-tapply( v, (seq_along(v)-1) %/% 7, sum)
sd(vv)
sd(vv)/sqrt(7)
sd(c(0,1))/sqrt(7)
system.time({vv<-tapply( v, (seq_along(v)-1) %/% 7, sum)})
system.time({vv<-tapply( v, (seq_along(v)-1) %/% 7, sum)})
v<-rep(0,121)
v[1]<-1
v[20]<-1
vv<-tapply( v, (seq_along(v)-1) %/% 7, sum)
system.time({vv<-tapply( v, (seq_along(v)-1) %/% 7, sum)})
sqrt(7)
sqrt(7)2
sqrt(7)^2
2.645751*2.645751
2.64575*2.64575
2.6457*2.6457
2.6458*2.6458
?mean
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2  ]
q<-"SELECT *
FROM koctas.dbo.b_move_dept"
move_dept<- sqlQuery(dbhandle,q)
moved<-data.table(move_dept)
closeAllConnections()
library("RODBC")
require(data.table)
require(bit64)
require(ggplot2)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=10.160.160.120;database=Koctas;uid=ktadm;pwd=Kt1881KS')
q<-"SELECT *
FROM koctas.dbo.b_move_dept"
move_dept<- sqlQuery(dbhandle,q)
moved<-data.table(move_dept)
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2  ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2,,vendor]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2,length(sd),vendor]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (sd/avg)>0.5 ]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (sd/avg)>1r]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (sd/avg)>1]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (sd/avg)>0.6]
moved[nRow>5,list(n=length(minL),min=min(avgL),avg=mean(avgL),max=max(avgL),sd=sd(avgL)),list(store,vendor)][n>2 & (sd/avg)>0.6,length(store),vendor]
getwd()
setwd("G:/R/shiny/coursera")
runApp()
library(shiny)
library(shiny)
runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='mustafa',
token='7EAA0E78315C245AF15C987920963656',
secret='<SECRET>')
shinyapps::setAccountInfo(name='mustafa', token='7EAA0E78315C245AF15C987920963656', secret='lvNhVm7azf9OLoFnL3JaBJU6ksirCGWxpyDWhLld')
install.packages(c('ggplot2', 'shiny'))
setwd("G:/R/shiny/dataproducts")
library(shiny)
runApp()
??diamonds
summary(diamonds)
?ggplot
library(Rpubs)
install.packages(Rpubs)
install.packages("Rpubs")
library(Rpubs)
getwd()
runApp()
liibrary(shiny)
library(shiny)
runApp()
