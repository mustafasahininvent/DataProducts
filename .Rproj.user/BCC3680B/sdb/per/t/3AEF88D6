{
    "contents" : "###########  REPLENISHMENT SIMULATION ##############\n\n\n##########  packages and functions #############\nrm(list=ls())\nsetwd(\"G:/Koctas\")\nsource('G:/R/InventFunctions.R')\nrequire(data.table)\nrequire(bit64)\nrequire(xts)\nrequire(ggplot2)\n\n########### simulation function  ######\nsimule9.1=function(beginindex,koli,servicelevel,data,reordp=NA,lead=NA,avgsale=NA,sdsale=NA,Navg=90,avgType=\"store\",M=1,k=0.2){\n  ##\n  z=qnorm(servicelevel)   # set the z for given servicelevel\n  gap=1 # what is the minimum stok you want to keep\n  \n  data$STOCK=data$stock   # initialize the stock level\n  data[,c(\"ORDERQ\",\"RECVDQ\",\"OPENQ\",\"LS\",\"LEAD\",\n          \"AVGSALE\",\"SDSALE\",\"SAFETYSTOCK\",\"REORDERP\",\"PO\",\"GAP\",\"KOLI\",\"OUTSALE\"):=0]\n  # initialize the all the computed variables\n  data$OUTSALE=data$sale # initialize the sale w/o outliers\n  \n  \n  # if daily lead time is not given then it is average of the SAP value or 30\n  if(is.na(lead[1])){\n    saplead=meanp(data$saplead)\n    if (is.nan(saplead)) saplead=30\n  }\n  else\n    data$LEAD=lead\n  \n  \n  # if these values are not given they will be calculated\n  if(!is.na(reordp)) data$REORDERP=reordp\n  if(!is.na(avgsale)) data$AVGSALE=avgsale\n  if(!is.na(sdsale)) data$SDSALE=sdsale\n  \n  # M is the number of days we wait for starting simulation\n  if ((beginindex+M)>=length(data$date)) M=length(data$date)-beginindex\n  for(i in (beginindex+M):length(data$date)){\n    \n    change=data$sale[i]+data$ret[i]-data$RECVDQ[i]  # calculate stock change\n    data$STOCK[i]=data$STOCK[i-1]-change            # adjust new stock position  \n    if (data$STOCK[i]<0){                            # if we fell short\n      data$LS[i]=data$STOCK[i]  #at this stage partial fills are OK\n      data$STOCK[i]=0                                 # set stock to 0\n    }\n    if(data$RECVDQ[i]==0){data$OPENQ[i]=data$OPENQ[i-1]  # if no order is received carry on open order\n    } else {data$OPENQ[i]=data$OPENQ[i-1]-data$RECVDQ[i]} # if order is received then remove open order\n    \n    if(is.na(lead[1])){\n      data$LEAD[i]=meanp(abs(tail(data$lead[beginindex:i],Navg)))\n      if (is.nan(data$LEAD[i])) data$LEAD[i]=saplead\n    }\n    data$LEAD[i]=max(1,ceiling(data$LEAD[i]))\n    \n    if(is.na(avgsale)){\n      if (avgType==\"store\")\n        sale=data$sale[beginindex:(i-1)]\n      else\n        sale=data$Asale[beginindex:(i-1)]\n      \n      sale=pmin(data$OUTSALE[i],meanp(sale)+3*sd(sale),na.rm=T)\n      data$OUTSALE[i]=sale\n      sale=data$OUTSALE[beginindex:i]\n      data$AVGSALE[i]=pmin(5,mean(tail(sale,Navg)))\n      data$SDSALE[i]=sd(tail(sale,Navg)) \n    }\n    \n    data$SAFETYSTOCK[i]=z*sqrt(((data$SDSALE[i]^2)*data$LEAD[i])+data$AVGSALE[i]^2) #z*(data$SDSALE[i]^2)*sqrt(data$LEAD[i])\n    \n    if(is.na(reordp))\n      data$REORDERP[i]=ceiling(data$SAFETYSTOCK[i]+data$AVGSALE[i]*data$LEAD[i])\n    \n    if ((data$STOCK[i]+data$OPENQ[i])<=data$REORDERP[i]){\n      if(data$LEAD[i]>data$LEAD[i-1])\n        data$PO[i]=(data$AVGSALE[i]*data$LEAD[i])\n      else\n        data$PO[i]=(data$AVGSALE[i]*data$LEAD[i])-data$OPENQ[i]\n      data$GAP[i]=pmax((gap-(data$STOCK[i]+data$OPENQ[i])),data$PO[i])\n      \n      kackoli=kolile(((data$GAP[i])/koli),k)  # koli adeti kysyty ls i ?ok arttyryyor\n      data$KOLI[i]=kackoli*koli\n      kackoli=max(1,kackoli)\n      if(kackoli>0){                                            # ayny zamanda avg sstok u da arttyryyor\n        multiple=kackoli\n        #   multiple=pmin(10,pmax(1,ceiling((data$AVGSALE[i]*data$LEAD[i])/koli)))\n        oneri=koli*multiple\n        data$ORDERQ[i]=oneri\n        data$OPENQ[i]=data$OPENQ[i]+oneri\n        \n        \n        j=i+ceiling(data$LEAD[i])\n        data$RECVDQ[j]=data$RECVDQ[j]+oneri\n      } \n    }\n  }\n  \n  return(data)\n}\n\n#########################\n\n###Parameteler ----\nREYON=REYON # 103026\nM=M  # 1  #  waiting period \ngraph=0\nminlead=2 #must be positive integer\nNavg=average  # 90 days\navgtype=\"store\"  # should I take avg from store\n\n#### input data #####\n# dates; 815*3 data frame of three cols for dates expressed in factor, char and date classes\n# item; 2750*3 data table of 3 cols for sku store and starting date index\n# MASTER; 2643*31 data table for information   \n# [1] \"sku\"                 \"store\"               \"KOLI\"                \"UYDU\"                \"FIYAT\"              \n# [6] \"AVGSALE\"             \"AVGuSALE\"            \"AVGSTOK\"             \"INVuAVGSTOCK\"        \"NEWREALAVGSTOCK\"    \n# [11] \"NEWREALSS\"           \"INVuSAFETYSTOCK\"     \"SS1\"                 \"SS2\"                 \"NEWSS\"              \n# [16] \"REORDERPOINT\"        \"NEWREORDERPOINT\"     \"INVuREORDERPOINT\"    \"NEWREALREORDERPOINT\" \"LEAD\"               \n# [21] \"REALLEAD\"            \"REALLEADSD\"          \"NEWAVGLEAD\"          \"LS\"                  \"NEWREALLS\"          \n# [26] \"AVGORDSIZE\"          \"NEWAVGORDSIZE\"       \"NORD\"                \"NEWNORD\"             \"SERVICELEVEL\"       \n# [31] \"Z\"\n# T1ALL; list of data tables, length=2750= for each sku-store, \n# each table contains \"date\"    \"stock\"   \"sale\"    \"ret\"     \"lead\"    \"saplead\" \"am\"      \"amRe\"    \"An\"      \"Astok\"   \"Asale\"   \"price\" \n# dimension of each table is number of days=815 by 12. It contains realized stock sale returns leadtimes given leadtime total sales and totale returns overall stok and overall sale and price\nload(paste0(\"ALLT\",REYON,\".rdata\"))\n##############\n\nOMASTER=MASTER # keep the original\nk=1\nNdates=815 # we have more than two years\nMASTER$SUMSOD=0 # stock out days total\nMASTER$NEWSUMSOD=0 # stock out days total when we disregard outliers\nMASTER$TOTALSALE=0 # total sale\nMASTER$TOTALRETURN=0 # total return\nMASTER=MASTER[0] # clear\norta=1  # if we have start from middle\nN=sum(!sapply(T1ALL,is.null)) # number of none empty sku-stores\nALLT=array(1.2,dim=c(N,Ndates,24)) # new data will be hold in this\n\ni=1\n\nprint(item[i,])\n\nT1=T1ALL[[i]]\nCOMPARE=OMASTER[i,]\nbeginii=item$beginii[i]\n\nseasonal=function(x){pmax(floor((-x+20)*(x-80)/50),0)}\n\nT1$stock=10\nT1$sale=c(1,2) #seasonal(1:100) #\nT1$ret=0\nT1$lead[1:38]=5\nT1$lead[39:99]=9\n\n\nNEW=simule9.1(1,12,0.99,T1[1:100,],M=1,Navg=15,avgType=\"store\")\n\n\n\n#################\nccc=NEW\np <- ggplot(data=ccc, aes(x=date)) + \n  geom_line(aes(y = stock) ) +\n  geom_line(aes(y = STOCK), color=\"red\") +\n  geom_line(aes(y = replace(OPENQ,OPENQ==0,NA)), color=\"blue\",size=3) +\n  geom_line(aes(y = LEAD), color=\"green\") +\n  geom_line(aes(y = SAFETYSTOCK), color=\"blue\",linetype=4) +\n  geom_line(aes(y = REORDERP), color=\"salmon\",linetype=5) +\n  labs(title=paste0(item[i,],collapse=\" @ \") )\np\n\np1 <- ggplot(data=ccc, aes(x=date)) + \n  geom_line(aes(y = SAFETYSTOCK), color=\"green\") +\n  geom_line(aes(y = AVGSALE), color=\"red\",linetype=2) +\n  geom_line(aes(y = SDSALE),linetype=3) +\n  geom_point(aes(y = sale), color=\"blue\" ) +\n  labs(title=paste0(item[i,],collapse=\" @ \") )\np1\n\n",
    "created" : 1419236373327.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "579969017",
    "id" : "3AEF88D6",
    "lastKnownWriteTime" : 1418906654,
    "path" : "G:/ReplenishmentSimulation/REPLENISHMENTSIMULATION.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}